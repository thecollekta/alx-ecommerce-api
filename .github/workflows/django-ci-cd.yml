name: Django CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.13"
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
  PYTHONPATH: ${{ github.workspace }}
  DJANGO_SETTINGS_MODULE: ecommerce_backend.settings.testing
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  DEBUG: "False"

jobs:
  test:
    name: Test with PostgreSQL 17
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: 3.13
          cache: "pip"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev python3-dev

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/development.txt
          pip install coverage[toml] pytest-cov

      - name: Run database migrations
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          python manage.py check
          python manage.py migrate --noinput

      - name: Run tests with coverage
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          coverage run --source='.' manage.py test
          coverage xml
          coverage report -m

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: false

  lint:
    name: Lint and Format with Ruff
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Ruff
        run: |
          python -m pip install --upgrade pip
          pip install ruff

      - name: Run Ruff (formatting and linting)
        run: |
          # Check code style and import sorting
          ruff check .
          # Check formatting
          ruff format --check .

  security:
    name: Security checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: 3.13

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Check for vulnerable dependencies
        run: safety check --full-report

      - name: Run bandit security linter
        run: bandit -r . -x tests,venv

  deploy:
    name: Deploy to production
    needs: [test, lint, security]
    if: false
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: 3.13

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/production.txt

      - name: Run database migrations
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
          DJANGO_SETTINGS_MODULE: ecommerce_backend.settings.production
        run: |
          python manage.py migrate --noinput

      - name: Collect static files
        env:
          DJANGO_SETTINGS_MODULE: ecommerce_backend.settings.production
        run: |
          python manage.py collectstatic --noinput

      - name: Restart application server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.PRODUCTION_HOST }}
          USER: ${{ secrets.PRODUCTION_USER }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST "cd /path/to/your/app && docker-compose restart"
          rm -f private_key.pem
