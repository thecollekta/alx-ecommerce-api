name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.13'
  POSTGRES_VERSION: '17'
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: test_db
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
  PYTHONUNBUFFERED: 1
  DJANGO_SETTINGS_MODULE: ecommerce_backend.settings.test
  SECRET_KEY: test-secret-key
  DEBUG: 'False'

jobs:
  test:
    name: Test with Python ${{ env.PYTHON_VERSION }}
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: --entrypoint redis-server

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev python3-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/development.txt
        pip install pytest pytest-cov pytest-django pytest-xdist
        pip install black ruff mypy bandit safety
    
    - name: Check code formatting with Black
      run: black --check .
    
    - name: Lint with Ruff
      run: ruff check .
    
    - name: Type checking with mypy
      run: mypy .
    
    - name: Run security check with bandit
      run: |
        bandit -r . -x tests,venv,.venv,env,.env,__pycache__
    
    - name: Check for vulnerable dependencies
      run: safety check --file=requirements/development.txt
    
    - name: Run database migrations
      run: |
        python manage.py check --deploy
        python manage.py makemigrations --check --dry-run
        python manage.py migrate
    
    - name: Run tests with coverage
      run: |
        coverage run --source='.' -m pytest -v --create-db
        coverage report -m
        coverage xml
    
    - name: Run tests with coverage
      run: |
        coverage run --source='.' manage.py test --noinput --verbosity=2
        coverage report -m
        coverage xml
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        fail_ci_if_error: false
