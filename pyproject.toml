[build-system]
requires = ["setuptools>=80.9.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ecommerce-backend-api"
version = "1.0.0"
description = "A complete backend API for an e-commerce platform, built for the ALX ProDev program."
requires-python = ">=3.13"
authors = [
  {name = "Festus Aboagye", email = "festus233@gmail.com.com"},
]
readme = "README.md"
dependencies = [
    # Core Django dependencies
    "Django==5.2.6",
    "asgiref==3.9.1",
    "sqlparse==0.5.3",

    # Database
    "psycopg2-binary==2.9.10",
    "django-environ==0.12.0",
    "dj-database-url>=3.0.1",

    # API Framework
    "djangorestframework==3.16.1",
    "django-filter==25.1.0",
    "drf-spectacular==0.28.0",
    "django-cors-headers==4.8.0",
    "djangorestframework-simplejwt>=5.5.1",
    "uritemplate==4.2.0",

    # Redis & Cache
    "redis==6.4.0",
    "django-redis==6.0.0",
    "hiredis==3.2.1",

    # GraphQL
    "graphene==3.4.3",
    "graphene-django==3.2.3",
    "graphql-core==3.2.6",
    "graphql-relay==3.2.0",
    "promise==2.3",

    # Background Tasks
    "celery>=5.5.3",
    "django-celery-beat>=2.8.1",
    "django-celery-results>=2.6.0",

    # Utilities
    "Pillow>=11.3.0",
    "requests>=2.32.5",
    "python-dateutil==2.9.0.post0",
    "six==1.17.0",

    # Logging & Monitoring
    "structlog==25.4.0",
    "python-json-logger==3.3.0",
    "sentry-sdk[django]>=2.37.1",

    # Security
    "django-csp>=4.0",
    "django-ratelimit>=4.1.0",
    "PyJWT==2.10.1",

    # Production
    "whitenoise>=6.10.0",
    "gunicorn>=23.0.0",

    # Additional dependencies
    "attrs==25.3.0",
    "inflection==0.5.1",
    "jsonschema==4.25.1",
    "jsonschema-specifications==2025.9.1",
    "PyYAML==6.0.2",
    "referencing==0.36.2",
    "rpds-py==0.27.1",
    "text-unidecode==1.3",
    "typing_extensions==4.15.0",
    "tzdata==2025.2",
]

[project.optional-dependencies]
dev = [
    "django-debug-toolbar>=6.0.0",
    "django-extensions>=4.1.0",
    "django-silk>=5.4.3",
    "ipython>=9.5.0",
    "pytest>=8.4.2",
    "pytest-django>=4.11.1",
    "pytest-cov>=7.0.0",
    "factory-boy>=3.3.3",
    "faker>=37.6.0",
    "ruff>=0.12.12",
    "mypy>=1.17.1",
    "pre-commit>=4.3.0",
    "bandit>=1.8.6",
    "black>=25.1.0",
    "isort>=6.0.1",
    "safety>=3.6.1",
    "django-stubs>=5.2.2",
    "djangorestframework-stubs>=3.16.2",
    "types-requests>=2.32.4.20250913",
    "types-redis>=4.6.0",
    "Sphinx>=8.2.3",
    "sphinx-rtd-theme>=3.0.2",
    "coverage>=7.10.6",
]

docs = [
    "Sphinx>=8.2.3",
    "sphinx-rtd-theme>=3.0.2",
    "docutils>=0.21.2",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["ecommerce_backend*", "apps*"]
exclude = ["tests*", "docs*", "scripts*", "venv*", ".venv*", ".github*", "requirements*"]

[tool.ruff]
# Basic configuration
line-length = 88
target-version = "py313"

# File exclusions
exclude = [
    ".bzr",
    ".direnv", 
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
    "static",
    "media",
    "fixtures",
    "logs",
    ".github",
]

# Lint configuration
[tool.ruff.lint]
# Rule selection - using only valid Ruff rule selectors
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C90", # mccabe
    "D",   # pydocstyle
    "S",   # flake8-bandit
    "TCH", # flake8-type-checking
    "T10", # flake8-debugger
    "EM",  # flake8-errmsg
    "EXE", # flake8-executable
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "PYI", # flake8-pyi
    "RUF", # Ruff-specific rules
]

ignore = [
    "E501",  # Line too long - handled by formatter
    "D1",    # Missing docstrings - can be too verbose
    "D2",    # Whitespace issues - handled by formatter
    "D4",    # Docstring content issues
    "S101",  # Use of assert - common in tests
    "S104",  # Possible binding to all interfaces
    "S311",  # Pseudorandom number generation
    "S603",  # Subprocess call with shell=True
    "S607",  # Starting a process with a partial executable path
]

unfixable = [
    "F401"  # Unused imports - better fixed manually
]

dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Per-file ignores
[tool.ruff.lint.per-file-ignores]
"**/migrations/*.py" = [
    "E501",  # Line too long
    "F401",  # Unused imports
    "F403",  # Wildcard imports
    "F405",  # Name might not be defined
    "F841",  # Unused variable
    "N802",  # Function name should be lowercase
    "N806",  # Variable in function should be lowercase
]

"**/tests/*.py" = [
    "S101",  # Use of assert
    "S106",  # Hardcoded password
    "S107",  # Hardcoded password in function call
]

"**/admin.py" = [
    "E501",  # Line too long
]

"**/urls.py" = [
    "E402",  # Module level import not at top of file
    "E501",  # Line too long
]

"**/settings/*.py" = [
    "F403",  # Wildcard imports
    "F405",  # Name might not be defined
    "F541",  # f-string without any placeholders
]

# Rule-specific configuration
[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["apps", "ecommerce_backend"]
known-third-party = ["django", "rest_framework", "graphene_django"]
single-line-exclusions = ["django"]
force-single-line = true
lines-after-imports = 2
combine-as-imports = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pyflakes]
extend-generics = ["django.http.HttpRequest"]

# Format configuration
[tool.ruff.format]
# Basic formatting
indent-style = "space"
quote-style = "double"
line-ending = "lf"

# Docstring formatting
docstring-code-format = true
docstring-code-line-length = 80

# Other options
skip-magic-trailing-comma = false
preview = false

[tool.black]
line-length = 88
target-version = ["py313"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
no_implicit_reexport = true
ignore_missing_imports = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = "apps.accounts.*"
ignore_errors = false

[[tool.mypy.overrides]]
module = "accounts.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "*.migrations.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "*.tests"
ignore_errors = true

[[tool.mypy.overrides]]
module = "*.tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "*.test_*"
ignore_errors = true

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "ecommerce_backend.settings.test"
python_files = ["tests.py", "test_*.py", "*_tests.py"]
addopts = [
    "--cov=.",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
    "--reuse-db",
    "--nomigrations",
]
testpaths = ["tests"]

[tool.coverage.run]
source = ["."]
omit = [
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "*/env/*",
    "*/.env/*",
    "manage.py",
    "*/settings/*",
    "*/tests/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[project.urls]
Repository = "https://github.com/thecollekta/alx-ecommerce-api.git"